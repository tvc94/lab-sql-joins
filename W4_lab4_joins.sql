-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

USE sakila;
SELECT * FROM sakila.film;

-- 1/ List the number of films per category.

SELECT 
    c.name AS category_name,
    COUNT(f.film_id) AS number_of_films
FROM sakila.film AS f
INNER JOIN sakila.film_category AS fc 
ON f.film_id = fc.film_id
INNER JOIN sakila.category AS c 
ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY number_of_films DESC;

-- 2/ Retrieve the store ID, city, and country for each store.

SELECT * FROM sakila.store;
SELECT * FROM sakila.country;
SELECT * FROM sakila.city;


SELECT 
    c.city AS city_name,
    COUNT(f.city_id) AS number_of_city
FROM sakila.city AS c
INNER JOIN sakila.city AS c 
ON f.film_id = fc.film_id
INNER JOIN sakila.category AS c 
ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY number_of_films DESC;

-- 3/ Calculate the total revenue generated by each store in dollars.


SELECT * FROM sakila.store
SELECT * FROM sakila.payment;
SELECT * FROM sakila.staff;



SELECT 
    st.store_id,
    SUM(p.amount) AS total_revenue
FROM 
    payment p
JOIN 
    staff s ON p.staff_id = s.staff_id
JOIN 
    store st ON s.store_id = st.store_id
GROUP BY 
    st.store_id;

-- 4/ Determine the average running time of films for each category.

SELECT
name,
AVG(length) as average_running_time
FROM sakila.film as f
JOIN sakila.film_category as fc on f.film_id = fc.film_id
JOIN sakila.category sc on sc.category_id = fc.category_id
GROUP BY sc.name;

-- Bonus:

-- Identify the film categories with the longest average running time.

SELECT
name,
AVG(length) as average_running_time
FROM sakila.film as f
JOIN sakila.film_category as fc on f.film_id = fc.film_id
JOIN sakila.category sc on sc.category_id = fc.category_id
GROUP BY sc.name
ORDER BY average_running_time DESC
LIMIT 10;


-- Display the top 10 most frequently rented movies in descending order.

select title, rental_rate from sakila.film
order by
rental_rate DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1 : Yes 

SELECT 
    i.store_id, 
    f.title 
FROM 
    sakila.film AS f
JOIN 
    sakila.inventory AS i ON f.film_id = i.film_id
WHERE 
    f.title LIKE '%Academy Dinosaur%'
GROUP BY 
    i.store_id, f.title;


-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
-- 
SELECT title
FROM sakila.film as f
CASE 
WHEN xx IFNULL
WHEN



-- Here are some tips to help you successfully complete the lab:

-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

-- Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use. If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query
-- Tip 2: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.

